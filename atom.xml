<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://iwangxing.cn/manjuan/</id>
    <title>漫卷</title>
    <updated>2019-12-18T07:50:46.687Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://iwangxing.cn/manjuan/"/>
    <link rel="self" href="https://iwangxing.cn/manjuan//atom.xml"/>
    <subtitle>躬行不言，默而成事</subtitle>
    <logo>https://iwangxing.cn/manjuan//images/avatar.png</logo>
    <icon>https://iwangxing.cn/manjuan//favicon.ico</icon>
    <rights>All rights reserved 2019, 漫卷</rights>
    <entry>
        <title type="html"><![CDATA[css中常见的单位]]></title>
        <id>https://iwangxing.cn/manjuan//post/css-zhong-chang-jian-de-dan-wei</id>
        <link href="https://iwangxing.cn/manjuan//post/css-zhong-chang-jian-de-dan-wei">
        </link>
        <updated>2019-12-18T07:13:58.000Z</updated>
        <content type="html"><![CDATA[<h3 id="px">px</h3>
<ul>
<li>这个就不多说了，<code>CSS</code>中最为常用的一种单位，传统上一个像素对应计算机屏幕上的一个点。</li>
</ul>
<h3 id="百分比">百分比%</h3>
<ul>
<li>子元素相对父容器的占比</li>
<li>设置子元素的<code>font-size</code>为50%，那么子元素的<code>font-size</code>等于父容器的<code>font-size*50%</code>。</li>
</ul>
<h3 id="em">em</h3>
<ul>
<li><code>em</code>是一个相对单位</li>
<li>1em等于该元素设置的字体大小
这里有一个很常见的误区，很多人说1em等于其父元素的字体大小，其实这是不对的，在该元素没有设置字体大小的时候，该元素的字体大小继承了其父元素的字体大小，所以这时该元素上1em等于其父元素的字体大小。但是如果该元素自己设置了字体大小且不等于其父元素的字体大小，那么该元素上1em就等于该元素自己的字体大小而于其父元素的字体大小无关。
例如下边这段代码，box2自己设定了font-size：15px；而box1没有设定font-size，所以box的font-size继承了其父元素的font-size等于20px。造成的结果是box1中1em等于20px；box2中1em等于15px，所以box2的宽度会小于box1的宽度。</li>
</ul>
<pre><code>&lt;div style=&quot;font-size:20px;&quot;&gt;
    &lt;div style=&quot;width: 5em;background-color: blueviolet&quot;&gt;box1&lt;/div&gt;
    &lt;div style=&quot;font-size: 15px;width: 5em;background-color: blue&quot;&gt;box2&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><img src="https://upload-images.jianshu.io/upload_images/9260635-a04e784af6cd5a73.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="屏幕快照 2018-11-07 下午10.45.00.png"></p>
<ul>
<li>为什么使用<code>em</code>，或者说<code>em</code>相较于<code>px</code>的好处</li>
</ul>
<ol>
<li>用户可以设置字体大小</li>
</ol>
<ul>
<li>如果使用<code>em</code>为单位，用户在浏览器中设置字号大小，我们的页面字体和用em作为单位设定的属性也会相应的改变（例如设定<code>width:5em;</code>用户修改浏览器字号后该元素的宽度也会变化），使用<code>px</code>则没有任何改变（很多国外的网站是这样做的，国内这样做的很少）。</li>
</ul>
<ol start="2">
<li>修改方便快捷</li>
</ol>
<ul>
<li>修改父容器的字体大小子元素的字体大小都会跟着改变，这一点是<code>px</code>无法做到的</li>
<li>举一个例子可能更好理解，比如我们写一片文章的样式，有标题，二级标题，大纲，文本，现在要整体将字体放大，我们只需要修改<code>html</code>或者<code>body</code>的<code>font-size</code>就可以了,如果使用<code>px</code>作单位就需要每一处分别修改了。</li>
</ul>
<h3 id="rem">rem</h3>
<ul>
<li><code>rem</code>是对<code>em</code>的改进，这里我们先讲一下<code>em</code>的一个很烦人的缺陷，就是遇到嵌套很深的结构，我们就不容易立刻知道每个子元素的<code>1em</code>等于多个<code>px</code>了，比如下面这个例子：</li>
</ul>
<pre><code class="language-css">.outer{
	font-size: 2em;
}
.inner,.text{
	font-size: 0.75em;
}
</code></pre>
<pre><code class="language-html">&lt;div class=&quot;outer&quot;&gt;
     &lt;div class=&quot;articl-title&quot;&gt;测试一下，你就知道的点点滴滴多多多多多&lt;/div&gt;
     &lt;div id=&quot;inner&quot; class=&quot;inner&quot;&gt;
          &lt;a href=&quot;&quot;&gt;css中的常见单位&lt;/a&gt;
          &lt;p class=&quot;text&quot;&gt;em和rem有哪些不同&lt;/p&gt;
      &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<ul>
<li><code>.outer</code>的<code>font-size</code>为<code>2em</code>，我们没有给它以上的父容器设置<code>font-size</code>，所以它的<code>font-size</code>为<code>16px*2=32px</code>，但是我们想知道<code>.text</code>的<code>font-size</code>就比较复杂了<code>16px*2*0.75*0.75=18px</code>。</li>
<li>如何解决这问题呢？这里css3引入了 <code>rem</code>的概念，与<code>em</code>非常相似，最重要的不同是，不论在那一级元素上1个<code>rem</code>都等于跟元素<code>html</code>的<code>font-size</code>，这样不仅具有<code>em</code>的优点，还不会造成混乱，不论<code>html</code>结构嵌套多复杂我们都能轻松换算出当前元素的<code>font-size</code>对应多少个px。</li>
</ul>
<pre><code>&lt;div style=&quot;font-size: 1.5rem; width: 5rem;background-color: #797979;&quot;&gt;1.5rem;&lt;/div&gt;
</code></pre>
<pre><code>html{
        font-size: 20px;
 }
</code></pre>
<ul>
<li>上面这段代码中，即使我们给当前元素设定了<code>font-size:1.5rem;</code>但不影响我们<code>width:5rem</code>的计算，当前元素的宽度还是以<code>1rem=20px;</code>计算<code>20*5=100px;</code></li>
<li>这里有一点建议,给<code>&lt;html&gt;</code>根元素添加如下的样式：</li>
</ul>
<pre><code class="language-css">html{
        font-size:62.5%;
}
</code></pre>
<ul>
<li>这样一来根元素<code>&lt;html&gt;</code>的<code>font-size</code>就变成<code>16px*62.5%=10px</code>,也就是 <code>1rem=10px</code>。这样方便我们计算（与设计稿对照）</li>
</ul>
<h3 id="vw和vh">vw和vh</h3>
<table>
<thead>
<tr>
<th style="text-align:center">名称</th>
<th style="text-align:center">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">vw</td>
<td style="text-align:center">1vw = 视口宽度的1%</td>
</tr>
<tr>
<td style="text-align:center">vh</td>
<td style="text-align:center">1vw = 视口高度的1%</td>
</tr>
<tr>
<td style="text-align:center">vmin</td>
<td style="text-align:center">选取vw和vh中最小的那个</td>
</tr>
<tr>
<td style="text-align:center">vmax</td>
<td style="text-align:center">选取vw和vh中最大的那个</td>
</tr>
</tbody>
</table>
<ul>
<li>这里解释一下视口
这里视口的宽度和高度不是指屏幕的高宽，更不是浏览器的高宽，而是浏览器内部的可视区域大小，即<code>window.innerWidth/window.innerHeight</code></li>
<li>目前使用的场景并不多，因为使用百分比也可以实现相同的效果，我个人在制作幻灯片效果时，会选择使用<code>vw,vh</code>,比较方便。</li>
</ul>
<hr>
<p>先写这些有时间再更</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[css计数器]]></title>
        <id>https://iwangxing.cn/manjuan//post/css-ji-shu-qi</id>
        <link href="https://iwangxing.cn/manjuan//post/css-ji-shu-qi">
        </link>
        <updated>2019-12-18T07:12:57.000Z</updated>
        <content type="html"><![CDATA[<p>先来看一下这几个属性</p>
<h3 id="counter-reset-计数器重置">counter-reset 计数器重置</h3>
<blockquote>
<p>参数
1.计数器名称
2.计数器初始值
默认值为0，必须为整数，可以为负值，若为非整数则默认为0</p>
</blockquote>
<h3 id="counter-increment计数器-递增">counter-increment计数器-递增</h3>
<blockquote>
<p>参数
1.计数器名称
就是给那个计数器递增值
2.递增的幅度
默认值为1，必须为整数，可以为负值</p>
</blockquote>
<h3 id="counter">counter</h3>
<blockquote>
<p>参数
name:计数器名称（counter-reset中设置的名称）
list-style-type计数样式，例如lower-alpha英文小写字母，lower-roman小写罗马数字，upper-roman大写罗马数字，默认为阿拉伯数字。<a href="https://www.w3cschool.cn/cssref/pr-list-style-type.html">如果你不了解这些样式的话到这里查看吧</a></p>
</blockquote>
<ul>
<li>counter只能用在content中</li>
<li>content只能用在before和after这些伪类里</li>
</ul>
<pre><code>.result::before{
    content:counter(veg);
}
</code></pre>
<p>举个例子</p>
<h5 id="html">html</h5>
<pre><code>&lt;div class=&quot;container&quot;&gt;
    &lt;div class=&quot;item&quot;&gt;西红柿&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;黄瓜&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;菠菜&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;西葫芦&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;冬瓜&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;白菜&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;苦瓜&lt;/div&gt;
    &lt;div class=&quot;item&quot;&gt;茄子&lt;/div&gt;
    &lt;br&gt;您选择了
    &lt;div class=&quot;result&quot;&gt;&lt;/div&gt;&amp;nbsp;个
&lt;/div&gt;

</code></pre>
<h5 id="css">css</h5>
<pre><code>.container{
    padding: 50px;
    counter-reset: veg 0;
}
.item{
    display: inline-block;
    height: 50px;
    line-height: 50px;
    border-radius: 10px;
    border:1px solid #666666;
    margin: auto;
    text-align: center;
    padding:0 20px;
    color: #666;
}
.item-active{
    counter-increment: veg 1;
    background-color:green;
    color: white;
    border-color: green;
}
.result{
    display: inline-block;
}
.result::before{
    content: counter(veg,upper-roman);
    color: red;
}
</code></pre>
<h5 id="js">js</h5>
<pre><code>//这里的js只负责添加标记的class，具体统计数量由css实现
var $=function (tag) {
     return document.querySelectorAll(tag);
}
for(var i=0;i&lt;$(&quot;.item&quot;).length;i++) {
     $(&quot;.item&quot;)[i].addEventListener('click', function () {
            this.classList.toggle('item-active');
     });
}
</code></pre>
<h5 id="效果">效果</h5>
<p><img src="https://upload-images.jianshu.io/upload_images/9260635-95b8fc2f0a6ead4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="运行效果"></p>
<h3 id="counters-嵌套计数">counters 嵌套计数</h3>
<h5 id="html-2">html</h5>
<pre><code>&lt;div class=&quot;reset&quot;&gt;
    &lt;div class=&quot;counter&quot;&gt;第一部
        &lt;div class=&quot;reset&quot;&gt;
            &lt;div class=&quot;counter&quot;&gt;第一部第一章&lt;/div&gt;
            &lt;div class=&quot;counter&quot;&gt;第一部第二章
                &lt;div class=&quot;reset&quot;&gt;
                    &lt;div class=&quot;counter&quot;&gt;第一部第二章第一节&lt;/div&gt;
                    &lt;div class=&quot;counter&quot;&gt;第一部第二章第二节&lt;/div&gt;
                    &lt;div class=&quot;counter&quot;&gt;第一部第二章第三节&lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
            &lt;div class=&quot;counter&quot;&gt;第一部第三章&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;counter&quot;&gt;第二部
        &lt;div class=&quot;reset&quot;&gt;
            &lt;div class=&quot;counter&quot;&gt;第二部第一章第一节&lt;/div&gt;
            &lt;div class=&quot;counter&quot;&gt;第二部第一章第二节&lt;/div&gt;
            &lt;div class=&quot;counter&quot;&gt;第二部第一章第三节&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;counter&quot;&gt;第三部
        &lt;div class=&quot;reset&quot;&gt;
            &lt;div class=&quot;counter&quot;&gt;第三部第一章&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<h5 id="css-2">css</h5>
<pre><code>.reset { 
     padding-left: 30px; 
     counter-reset: chapters; 
     line-height: 2; 
     color: #666; 
 }
 .counter:before { 
     content: counters(chapters, '-') '. ';
     counter-increment: chapters;  
 }
</code></pre>
<h5 id="效果-2">效果</h5>
<p><img src="https://upload-images.jianshu.io/upload_images/9260635-38ac80a77a8c82fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="嵌套计数实现目录结构"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何画出小于1px的线]]></title>
        <id>https://iwangxing.cn/manjuan//post/ru-he-hua-chu-xiao-yu-1px-de-xian</id>
        <link href="https://iwangxing.cn/manjuan//post/ru-he-hua-chu-xiao-yu-1px-de-xian">
        </link>
        <updated>2019-12-18T07:11:43.000Z</updated>
        <content type="html"><![CDATA[<p>有一天产品经理告诉我App底部tab栏上边框太宽了，赶紧改窄一点。我想这个简单啊，改一下boder的宽度就OK了，结果我一看代码，border-top的宽度已经是1px了，这时如果将border的宽度设置为小于1px的值，浏览器还是当作1px来渲染。不会有任何效果。这时要不要告诉产品需求不合理，无法实现（想想还是算了吧，怕被打）。</p>
<p>这时只能想办法变通一下，于是我想到了css3中的transform属性，该属性允许我们对元素进行旋转、缩放、移动或倾斜。这里我就想通过缩放来实现绘制小于1px的线条。思路是将一个元素的边框设置为1px，再通过缩放达到将线条变窄的目的。</p>
<p>看下面的代码，我们给下面的三栏布局加分割线，左边的分割线设置边框为1px,右边线条使用缩放实现变窄的效果。</p>
<ul>
<li>html代码</li>
</ul>
<pre><code class="language-html">&lt;section class=&quot;layout&quot;&gt;
    &lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;middle&quot;&gt;&lt;/div&gt;
    &lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
&lt;/section&gt;
</code></pre>
<ul>
<li>css代码</li>
</ul>
<pre><code class="language-css">.layout{
    display: flex;
    height: 100%;
}
.left,.right,.middle{
    flex: 1;
}
.middle{
    border-left: 1px solid #000;
}
.right:before{
    content: &quot;&quot;;
    height: 100%;
    display: inline-block;
    background-color: #000;
    width: 1px;
    transform: scaleX(0.5);
}
</code></pre>
<ul>
<li>效果如下
<img src="http://upload-images.jianshu.io/upload_images/9260635-ba15de918321efbf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1080/q/50" alt="图片发自简书App"></li>
</ul>
<p>这里是绘制纵向的线条，所以我们使用X轴方向的缩放scaleX( )，如果你要绘制横向的超窄线条可以使用Y轴方向的缩放scaleY( )。如果你想绘制一条倾斜的超窄线条，要怎么实现呢？实现方式：先缩放绘制出X或Y轴方向上的超窄线条，再通过transform:rotate(angle)旋转一定的角度来达到倾斜的效果。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gridea 博客搭建]]></title>
        <id>https://iwangxing.cn/manjuan//post/gridea-bo-ke-da-jian</id>
        <link href="https://iwangxing.cn/manjuan//post/gridea-bo-ke-da-jian">
        </link>
        <updated>2019-12-18T03:36:24.000Z</updated>
        <content type="html"><![CDATA[<h1 id="安装git">安装git</h1>
<h1 id="申请github账号">申请github账号</h1>
<h1 id=""></h1>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[npm设置淘宝镜像]]></title>
        <id>https://iwangxing.cn/manjuan//post/npm</id>
        <link href="https://iwangxing.cn/manjuan//post/npm">
        </link>
        <updated>2018-12-18T07:49:53.000Z</updated>
        <content type="html"><![CDATA[<h2 id="解决npm下载慢或者被墙的问题">解决npm下载慢或者被墙的问题</h2>
<ul>
<li>安装cnpm</li>
</ul>
<pre><code>npm i -g cnpm
npm install --global cnpm
</code></pre>
<p>接下来把所有的npm替换成cnpm即可</p>
<ul>
<li>
<p>关于cnpm
npm 的服务器在国外，有时候会被墙，下载速度也很慢
淘宝的开发团队把npm在国内做了一个镜像
每十分钟更新一次，基本没有时效问题</p>
</li>
<li>
<p>不想安装cnpm又想使用cnpm的资源来下载</p>
</li>
</ul>
<pre><code>npm install jquery --registry=https://registry.npm.taobao.org
</code></pre>
<p>但是每次手动加参数很麻烦</p>
<pre><code>npm config set registry https://registry.npm.taobao.org
</code></pre>
<p>执行过上面的命令，以后npm install 下载东西就是从淘宝服务器上下载了</p>
<pre><code># 查看 npm 配置信息，可以看到对应的registry信息
npm config list
</code></pre>
]]></content>
    </entry>
</feed>